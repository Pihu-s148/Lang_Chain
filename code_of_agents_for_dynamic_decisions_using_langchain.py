# -*- coding: utf-8 -*-
"""Code_of_Agents_for_Dynamic_Decisions_using LangChain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IerQX2wRSR0ggtbpQMShmAIAPmzZJVsm

### Step 1: Install Required Libraries

In the first cell of your Colab notebook, install the necessary libraries. LangChain and OpenAI are the primary libraries needed.
"""

# Step 1: Install Required Libraries
!pip install -U langchain-community langgraph duckduckgo-search
!pip install -qU langchain-openai
!pip install python-dotenv

"""- **LangChain**: A framework for building applications with language models.

### Step 2:  Import Necessary Modules

After installing the library, import the necessary modules for your code.
"""

from langchain.agents import create_react_agent, AgentExecutor
from langchain.tools import DuckDuckGoSearchRun
from langchain.llms import OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage
from langchain.prompts import PromptTemplate

"""
### **Step 3:  Create The Agent**

The code snippet below represents a fully functional agent that uses an LLM to decide which tools to use. It is equipped with a generic search tool i.e. DuckDuckGo."""

# Initialize the LLM (replace 'your_openai_api_key' with your actual key)
llm = ChatOpenAI(model="gpt-4o",temperature=0, openai_api_key='open-ai key')

# Initialize the tool (DuckDuckGo search)
search = DuckDuckGoSearchRun()

# Initialize the tool (DuckDuckGo search)
search = DuckDuckGoSearchRun()

# Define a custom prompt
template = """Answer the following questions as best as you can. You have access to the following tools:

{tools}

Use the following format:

Question: the input question you must answer
Thought: you should always think about what to do
Action: the action to take, should be one of [{tool_names}]
Action Input: the input to the action
Observation: the result of the action
... (this Thought/Action/Action Input/Observation can repeat N times)
Thought: I now know the final answer
Final Answer: the final answer to the original input question

{agent_scratchpad}

Begin!

Question: {input}
Thought:"""

tools = [search]
tool_names = [tool.name for tool in tools]
prompt = PromptTemplate(
    template=template,
    input_variables=["input", "tools", "tool_names"],
)



# Create the agent
agent = create_react_agent(llm, tools, prompt)
agent_executor = AgentExecutor.from_agent_and_tools(agent=agent, tools=tools, verbose=True)

# Run the agent
response = agent_executor.invoke({"input": "what is the capital of France?"})

print(response["output"])

"""### Classroom Resources


*   How does Agents work in Langchain?: [LangChain Agents](https://drive.google.com/file/d/1cqd84X5OgNIEQGGBs4LYhpqTcMQ7OMNj/view?usp=sharing)

### Additional Resources

- **LangChain Documentation**: [LangChain Docs](https://langchain.readthedocs.io/en/latest/)

- **Langchain GitHub**: [Langchain GitHub](https://github.com/langchain/langchain)
"""