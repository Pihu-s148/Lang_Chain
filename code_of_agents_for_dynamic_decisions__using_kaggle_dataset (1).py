# -*- coding: utf-8 -*-
"""Code_of_Agents_for_Dynamic_Decisions_ Using Kaggle Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZDJ1sOyxp40IpH7z6vZBFI0LbvrVe4DT

### Step 1: Install Required Libraries

In the first cell of your Colab notebook, install the necessary libraries. LangChain and OpenAI are the primary libraries needed.
"""

# Step 1: Install Required Libraries
!pip install langchain-community langchain-openai kagglehub pandas

"""- **LangChain**: A framework for building applications with language models.

### Step 2:  Import Necessary Modules

After installing the library, import the necessary modules for your code.
"""

from langchain.agents import create_react_agent, Tool
from openai import OpenAI
from langchain.prompts import PromptTemplate
import kagglehub
import pandas as pd

"""
### Step 3:  Download the Dataset from Kaggle

After installing the modules, import the Kaggle dataset."""

# Step 3: Download and Load the Dataset
path = kagglehub.dataset_download("rkiattisak/smart-watch-prices")
print("Path to dataset files:", path)

# Adjust the filename as necessary based on the actual dataset structure
df = pd.read_csv(f"{path}/Smart watch prices.csv")

"""
### Step 4:  **Set Up API Key**

In the next cell, set up your OpenAI API key. Replace `"YOUR_API_KEY"` with your actual OpenAI API key."""

# Step 4: Set the OpenAI API Key
import os
os.environ["OPENAI_API_KEY"] = "your-openai-key"
client = OpenAI()

"""
### Step 5:  **Define the SmartWatch Checking Function**

Create a simple function that simulates checking the stock of a product:"""

# Step 5: Define a Function to List Available Smartwatches
def list_available_smartwatches():
    models = df['Model'].unique()
    return "Available smartwatch models:\n" + "\n".join(models)

# Step 6: Define a Function to Check Smartwatch Data
def check_smartwatch_availability(model_name):
    if model_name in df['Model'].values:
        model_info = df[df['Model'] == model_name].iloc[0]
        return (
            f"{model_name} is available!\n"
            f"Brand: {model_info['Brand']}\n"
            f"Price: ${model_info['Price (USD)']}\n"
            f"Operating System: {model_info['Operating System']}\n"
            f"Connectivity: {model_info['Connectivity']}\n"
            f"Display Type: {model_info['Display Type']}\n"
            f"Battery Life: {model_info['Battery Life (days)']} days\n"
        )
    else:
        return f"{model_name} is not in the dataset."

# Step 7: Create a Conversational Loop using the OpenAI Client
def chat_loop():
    print("Welcome to the Smartwatch Info Chat!")
    conversation_history = []

    while True:
        user_input = input("You: ")

        if "list watches" in user_input.lower():
            response = list_available_smartwatches()
        else:
            # Add user input to conversation history
            conversation_history.append({"role": "user", "content": user_input})

            # Generate a response using the chat model
            chat_completion = client.chat.completions.create(
                model="gpt-4o",  # Use the appropriate model name
                messages=conversation_history
            )

            # Access content using dot notation instead of dictionary-style indexing
            response = chat_completion.choices[0].message.content.strip()

            # Add the model's response to the conversation history
            conversation_history.append({"role": "assistant", "content": response})

        print(f"Agent: {response}")

        # Check if the user wants to exit
        if user_input.lower() in ["exit", "quit", "bye"]:
            print("Agent: Goodbye!")
            break

# Run the chat loop
chat_loop()

"""### Example Interaction:

Here's how a session might look when you run the `chat_loop` function:

```
Welcome to the Smartwatch Info Chat!
You: what kind of watches do you have?
Agent: I donâ€™t have physical products or items, but I can certainly help you with information about different types of watches. Here are some common types:

1. **Analog Watches**: These have hour and minute hands with numbers or markers around the face. They are traditional and often considered more classical.

2. **Digital Watches**: These display the time in numeric form and often include additional features like stopwatches, alarms, and backlighting.

3. **Analog-Digital Watches**: These combine features of both analog and digital displays, offering a traditional look with additional digital functionality.

4. **Mechanical Watches**: Powered by a winding mechanism. These include:
   - **Manual Mechanical**: Requires daily winding.
   - **Automatic Mechanical**: Uses the wearer's motion to wind itself.

5. **Quartz Watches**: Powered by a battery and known for their accuracy and low maintenance.

6. **Smartwatches**: Feature advanced capabilities like fitness tracking, notifications, and apps, often connected to a smartphone.

7. **Diving Watches**: Designed for underwater use with features like water resistance, luminescent hands, and rotating bezels.

8. **Dress Watches**: Elegant and simple, designed to complement formal attire.
```

### Additional Resources

- **LangChain Documentation**: [LangChain Docs](https://langchain.readthedocs.io/en/latest/)

- **Langchain GitHub**: [Langchain GitHub](https://github.com/langchain/langchain)
"""