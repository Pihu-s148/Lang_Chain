# -*- coding: utf-8 -*-
"""Code_for_Dynamic_Reports_with_Langchain_(Kaggle).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18swjcJTomEU9Yec8O2rOH6xiF0sEoY07

### Step 1: Install Required Libraries

In the first cell of your Colab notebook, install the necessary libraries. LangChain and OpenAI are the primary libraries needed.
"""

!pip install httpx==0.23.0

!pip install langchain_community kagglehub

!pip install -qU langchain-openai

"""- **LangChain**: A framework for building applications with language models.

### Step 2: **Import Libraries**

After installing the library, import the necessary modules for your code.
"""

from langchain_openai import OpenAI
from langchain import LLMChain
from langchain.prompts import PromptTemplate
import kagglehub
import pandas as pd

"""
### Step 3: **Set Up OpenAI API Key**

You'll need an OpenAI API key to access the language model. You can obtain this key from [OpenAI's website](https://openai.com/api/). Once you have the key, set it in your environment."""

# Set your OpenAI API key
import os
os.environ["OPENAI_API_KEY"] ="YOUR-OPENAI_API_KEY"

"""
### Step 4: **Import Dataset from KaggleHub**
"""

# Download latest version
path = kagglehub.dataset_download("kyanyoga/sample-sales-data")
print("Path to dataset files:", path)

"""
* We added the encoding parameter to the pd.read_csv function and set it to `'latin-1'`. This tells pandas to use the 'latin-1' encoding to decode the file instead of the default UTF-8."""

# Load the CSV file
file_path = f"{path}/sales_data_sample.csv"
sales_data = pd.read_csv(file_path, encoding='latin1')

"""
#### Step 5: **Filter the Large Dataset & Define the Prompt to Chain with the Input Data**

Create a prompt and set up the LangChain to generate the sales report.


"""

# Filter data for the last quarter (QTR_ID = 4)
last_quarter_data = sales_data[sales_data['QTR_ID'] == 4]

# Aggregate necessary metrics
revenue = last_quarter_data['SALES'].sum()
units_sold = last_quarter_data['QUANTITYORDERED'].sum()
top_product = (
    last_quarter_data.groupby('PRODUCTCODE')['SALES'].sum().idxmax()
)

# Prepare the data for LangChain
input_data = {
    "revenue": f"${revenue:,.2f}",
    "units_sold": units_sold,
    "top_product": top_product,
}

# Define the prompt
report_prompt = """
Generate a sales report for last quarter.
Revenue: {revenue}
Units Sold: {units_sold}
Top Product: {top_product}
"""

# Create a prompt template
prompt_template = PromptTemplate.from_template(report_prompt)

# Set up the LLMChain
chain = LLMChain(llm=OpenAI(), prompt=prompt_template)

"""
### Step 6: **Run the Chain and Print the Response**

Select the data for the last quarter and run the chain."""

# Run the chain with the data
response = chain.invoke(input_data)

# Print the response
print(response)

"""
### Additional Resources

- **OpenAI API Documentation**: [OpenAI API Docs](https://beta.openai.com/docs/)
- **Langchain GitHub**: [Langchain GitHub](https://github.com/langchain/langchain)"""